#!/usr/bin/env node

/**
 * Module dependencies.
 */
console.log('Starting application...');

// Initialize database first if not already done
async function initializeIfNeeded() {
  if (process.env.NODE_ENV === 'production' || process.env.RENDER) {
    try {
      console.log('Initializing database for production...');
      const { spawn } = require('child_process');
      const initProcess = spawn('node', ['./bin/init-database.js'], { stdio: 'inherit' });
      
      await new Promise((resolve, reject) => {
        initProcess.on('close', (code) => {
          if (code === 0) {
            console.log('Database initialization completed');
            resolve();
          } else {
            console.log('Database initialization failed, continuing anyway...');
            resolve(); 
          }
        });
        initProcess.on('error', (err) => {
          console.log('Database initialization error, continuing anyway...', err.message);
          resolve();
        });
      });
    } catch (err) {
      console.log('Failed to initialize database, continuing anyway...', err.message);
    }
  }
}

// Start the server
async function startServer() {
  try {
    var app = require('../app');
    var http = require('http');

    // Handle debug module safely
    var debug;
    try {
      debug = require('debug')('web-programming-24-25-project-team-30:server');
    } catch (err) {
      console.warn('Debug module not available, using console.log');
      debug = console.log;
    }

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    console.log(`Server starting on port ${port}`);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
      console.log(`Server is running on ${bind}`);
    }

  } catch (err) {
    console.error('Failed to start server:', err);
    process.exit(1);
  }
}

// Main execution
async function main() {
  await initializeIfNeeded();
  await startServer();
}

main().catch(err => {
  console.error('Application failed to start:', err);
  process.exit(1);
});
